name: Version and Dependency Management

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  track-changes:
    if: |
      github.event.action != 'closed' ||
      (github.event.action == 'closed' && github.event.pull_request.merged)
    runs-on: ubuntu-latest
    outputs:
      both-files-changed: ${{ steps.check-both-files.outputs.changed }}
      other-files-changed: ${{ steps.check-other-files.outputs.changed }}
      pending-release: ${{ steps.check-both-files.outputs.changed && !github.event.pull_request.merged }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for both version.json and requirements.txt changes
      id: check-both-files
      run: |
        version_changed=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'version.json' && echo "true" || echo "false")
        requirements_changed=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'requirements.txt' && echo "true" || echo "false")
        
        if [[ "$version_changed" == "true" && "$requirements_changed" == "true" ]]; then
          echo "Both files changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for other file changes
      id: check-other-files
      run: |
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -v -E 'version.json|requirements.txt')
        if [ -n "$changed_files" ]; then
          echo "Other files changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Notify about pending release
      if: steps.check-both-files.outputs.changed == 'true' && github.event.pull_request.merged != true
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const version = JSON.parse(fs.readFileSync('version.json')).version;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üìå Release pending (v${version}): Both version.json and requirements.txt were modified. ` +
                  "A release will be created automatically when this PR is merged."
          });

    - name: Request requirements input (on every commit)
      if: |
        steps.check-other-files.outputs.changed == 'true' &&
        steps.check-both-files.outputs.changed == 'false'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const hasExistingPrompt = comments.some(comment => 
            comment.body.includes("‚ö†Ô∏è Code changes detected without version/requirements updates")
          );
          
          if (!hasExistingPrompt) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚ö†Ô∏è Code changes detected without version/requirements updates. " +
                    "Please provide details of any new dependencies:\n\n" +
                    "<details>\n<summary>Click to add requirements</summary>\n\n" +
                    "```\n# Paste new requirements here\n```\n</details>\n\n" +
                    "Reply to this comment with your additions."
            });
          }

  verify-requirements:
    needs: track-changes
    if: |
      (needs.track-changes.outputs.both-files-changed == 'true' ||
       needs.track-changes.outputs.other-files-changed == 'true') &&
      github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      valid-requirements: ${{ steps.verify-pypi-packages.outputs.valid }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify package requirements
      id: verify-pypi-packages
      run: |
        # Get changed requirements
        changed_reqs=$(git diff --unified=0 ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- requirements.txt | \
                      grep -E '^\+[^+]' | sed 's/^\+//' | grep -v '^#')
        
        if [ -z "$changed_reqs" ]; then
          echo "No requirement changes detected"
          echo "valid=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Changed requirements:"
        echo "$changed_reqs"
        
        # Install pip and necessary tools
        python -m pip install --upgrade pip
        python -m pip install packaging

        invalid_packages=""
        valid=true
        
        for req in $changed_reqs; do
          # Clean up requirement string
          clean_req=$(echo "$req" | sed 's/^[ \t]*//;s/[ \t]*$//')
          
          echo "Checking requirement: $clean_req"
          if ! pip install --dry-run "$clean_req" &>/dev/null; then
            echo "::error::Requirement not satisfiable: $clean_req"
            invalid_packages+=" $clean_req"
            valid=false
          fi
        done

        if [ "$valid" = false ]; then
          echo "Invalid requirements found:$invalid_packages"
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "All requirements are valid and available on PyPI"
          echo "valid=true" >> $GITHUB_OUTPUT
        fi

  create-release:
    needs: [track-changes, verify-requirements]
    if: |
      github.event.pull_request.merged == true &&
      needs.track-changes.outputs.both-files-changed == 'true' &&
      needs.verify-requirements.outputs.valid-requirements == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=$(jq -r '.version' version.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ### Changes in this release
          - Version and requirements updated via PR #${{ github.event.pull_request.number }}
          - PR Title: ${{ github.event.pull_request.title }}
          
          View changes: ${{ github.event.pull_request.html_url }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}