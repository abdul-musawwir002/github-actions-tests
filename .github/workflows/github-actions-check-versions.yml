name: Version and Dependency Management

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  track-changes:
    if: |
      github.event.action != 'closed' ||
      (github.event.action == 'closed' && github.event.pull_request.merged)
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check-version.outputs.changed }}
      requirements-changed: ${{ steps.check-requirements.outputs.changed }}
      pending-release: ${{ (steps.check-version.outputs.changed == 'true' || steps.check-requirements.outputs.changed == 'true') && !github.event.pull_request.merged }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for version.json changes
      id: check-version
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'version.json'; then
          echo "Version file changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for requirements.txt changes
      id: check-requirements
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'requirements.txt'; then
          echo "Requirements file changed"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Notify about pending release
      if: (steps.check-version.outputs.changed == 'true' || steps.check-requirements.outputs.changed == 'true') && github.event.pull_request.merged != true
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let version = 'unknown';
          try {
            if (fs.existsSync('version.json')) {
              version = JSON.parse(fs.readFileSync('version.json')).version;
            }
          } catch (error) {
            console.log('Error reading version.json:', error.message);
          }
          
          let message = "📌 Release pending";
          if (version !== 'unknown') {
            message += ` (v${version})`;
          }
          message += ": ";
          
          if ("${{ steps.check-version.outputs.changed }}" === "true") {
            message += "version.json was modified. ";
          }
          if ("${{ steps.check-requirements.outputs.changed }}" === "true") {
            message += "requirements.txt was modified. ";
          }
          message += "A release will be created automatically when this PR is merged.";
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

  verify-requirements:
    needs: track-changes
    if: |
      github.event.action != 'closed' || 
      (github.event.action == 'closed' && github.event.pull_request.merged)
    runs-on: ubuntu-latest
    outputs:
      valid-requirements: ${{ steps.verify-pypi-packages.outputs.valid }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify package requirements
      id: verify-pypi-packages
      run: |
        echo "Checking if requirements.txt was changed..."

        changed=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'requirements.txt' && echo "yes" || echo "no")

        if [ "$changed" = "no" ]; then
          echo "requirements.txt was not changed"
          echo "valid=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "requirements.txt was changed, validating..."

        changed_reqs=$(git diff --unified=0 ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- requirements.txt | \
                      grep -E '^\+[^+]' | sed 's/^\+//' | grep -v '^#')

        if [ -z "$changed_reqs" ]; then
          echo "No actionable requirement changes detected"
          echo "valid=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        python -m pip install --upgrade pip
        python -m pip install packaging

        invalid_packages=""
        valid=true

        for req in $changed_reqs; do
          clean_req=$(echo "$req" | sed 's/^[ \t]*//;s/[ \t]*$//')
          echo "Checking requirement: $clean_req"

          if ! pip install --dry-run "$clean_req" &>/dev/null; then
            echo "::error::Requirement not satisfiable: $clean_req"
            invalid_packages+=" $clean_req"
            valid=false
          fi
        done

        if [ "$valid" = false ]; then
          echo "Invalid requirements:$invalid_packages"
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "All requirements are valid"
          echo "valid=true" >> $GITHUB_OUTPUT
        fi

  alpha-release:
    needs: [track-changes, verify-requirements]
    if: |
      github.event.pull_request.merged != true &&
      (needs.track-changes.outputs.version-changed == 'true' || 
      needs.track-changes.outputs.requirements-changed == 'true') &&
      (needs.track-changes.outputs.requirements-changed == 'false' || 
      needs.verify-requirements.outputs.valid-requirements == 'true')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from version.json
      id: version
      run: |
        if [ -f "version.json" ]; then
          VERSION=$(jq -r '.version' version.json)
        else
          VERSION="0.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Delete previous alpha release if exists
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG="v${{ steps.version.outputs.version }}-alpha"
        gh release delete "$TAG" --yes || echo "No previous release"
        git push origin --delete "$TAG" || echo "No previous tag"

    - name: Create new alpha GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}-alpha
        name: Alpha v${{ steps.version.outputs.version }}
        body: |
          ⚙️ Alpha release triggered by PR #${{ github.event.pull_request.number }}
          This is an automated pre-release.
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Authenticate with Release API
      id: login
      run: |
        echo "Authenticating..."
        response=$(curl -s -X POST "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/auth/login/" \
          -H "Content-Type: application/json" \
          -d '{"username": "${{ secrets.RELEASE_API_USER }}", "password": "${{ secrets.RELEASE_API_PASS }}"}')

        token=$(echo "$response" | jq -r '.token')
        if [ "$token" == "null" ] || [ -z "$token" ]; then
          echo "::error::Failed to authenticate with Release API"
          exit 1
        fi

        echo "::add-mask::$token"
        echo "token=$token" >> $GITHUB_OUTPUT

    - name: Create release in external system
      id: create-release
      run: |
        echo "Creating release record in external system..."
        response=$(curl -s -w "%{http_code}" -o tmp_response.json -X POST "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/devices/releases/create/" \
          -H "Authorization: Bearer ${{ steps.login.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{"version_number": "${{ steps.version.outputs.version }}", "desciption": "Alpha release for version ${{ steps.version.outputs.version }}"}')

        status_code=$(tail -n1 <<< "$response")
        if [ "$status_code" != "200" ] && [ "$status_code" != "201" ]; then
          echo "::error::Failed to create release. Status: $status_code"
          cat tmp_response.json
          exit 1
        fi

        release_id=$(jq -r '.id' tmp_response.json)
        if [ "$release_id" == "null" ] || [ -z "$release_id" ]; then
          echo "::error::Release ID not returned"
          cat tmp_response.json
          exit 1
        fi

        echo "release_id=$release_id" >> $GITHUB_OUTPUT

    - name: Call Alpha Test Validation API
      id: call-alpha-api
      run: |
        echo "Simulating Alpha test validation..."
        echo '{"passed": true}' > result.json

        PASSED=$(jq -r '.passed' result.json)
        if [ "$PASSED" != "true" ]; then
          echo "::error::Alpha tests did not pass"
          exit 1
        fi
        echo "Alpha tests passed."

    - name: Patch alpha test passed status
      run: |
        echo "Patching alpha test result..."
        response=$(curl -s -w "%{http_code}" -o patch_response.json -X PATCH "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/devices/releases/passed_alpha_test/${{ steps.create-release.outputs.release_id }}/" \
          -H "Authorization: Bearer ${{ steps.login.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{"is_alpha_test_passed": true}')

        status_code=$(tail -n1 <<< "$response")
        if [ "$status_code" != "200" ]; then
          echo "::error::Failed to patch alpha status. Status: $status_code"
          cat patch_response.json
          exit 1
        fi

    - name: Promote to beta
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Promoting release to beta..."
        response=$(curl -s -w "%{http_code}" -o promote_response.json -X POST "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/devices/releases/promote/${{ steps.create-release.outputs.release_id }}/" \
          -H "Authorization: Bearer ${{ steps.login.outputs.token }}")

        status_code=$(tail -n1 <<< "$response")
        if [ "$status_code" != "200" ]; then
          echo "::error::Failed to promote to beta. Status: $status_code"
          cat promote_response.json
          exit 1
        fi

        echo "Creating beta GitHub release..."
        gh release delete "v${{ steps.version.outputs.version }}-beta" --yes || true
        git push origin --delete "v${{ steps.version.outputs.version }}-beta" || true

        gh release create "v${{ steps.version.outputs.version }}-beta" \
          --title "Beta v${{ steps.version.outputs.version }}" \
          --notes "✅ Beta release promoted after alpha test pass." \
          --prerelease


  create-release:
    needs: [track-changes, verify-requirements]
    if: |
      github.event.pull_request.merged == true &&
      (needs.track-changes.outputs.version-changed == 'true' || 
       needs.track-changes.outputs.requirements-changed == 'true') &&
      (needs.track-changes.outputs.requirements-changed == 'false' || 
       needs.verify-requirements.outputs.valid-requirements == 'true')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ -f "version.json" ]; then
          VERSION=$(jq -r '.version' version.json)
        else
          VERSION="0.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ### Changes in this release
          ${{ needs.track-changes.outputs.version-changed == 'true' && '- Version updated' || '' }}
          ${{ needs.track-changes.outputs.requirements-changed == 'true' && '- Requirements updated' || '' }}
          
          Merged via PR #${{ github.event.pull_request.number }}:
          ${{ github.event.pull_request.html_url }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}