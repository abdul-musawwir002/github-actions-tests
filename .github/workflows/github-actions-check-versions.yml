name: Version and Dependency Management

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  track-changes:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check-version.outputs.changed }}
      requirements-changed: ${{ steps.check-requirements.outputs.changed }}
      pending-release: ${{ (steps.check-version.outputs.changed == 'true' || steps.check-requirements.outputs.changed == 'true') && !github.event.pull_request.merged }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for version.json changes
      id: check-version
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'version.json'; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for requirements.txt changes
      id: check-requirements
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q 'requirements.txt'; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi


  verify-requirements:
    needs: track-changes
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    outputs:
      valid-requirements: ${{ steps.verify-pypi-packages.outputs.valid }}
      added-packages: ${{ steps.verify-pypi-packages.outputs.added }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10.16'

    - name: Verify package requirements
      id: verify-pypi-packages
      run: |
        # Get the actual diff content of requirements.txt
        diff_output=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- requirements.txt || true)

        changed_reqs=$(echo "$diff_output" | grep '^+' || true | grep -v '^+++' || true | sed 's/^+//' | grep -v '^#' || true)


        if [ -z "$changed_reqs" ]; then
          echo "No requirement changes detected"
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "added=" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Changed requirements:"
        echo "$changed_reqs"

        python -m pip install --upgrade pip
        python -m pip install packaging

        invalid_packages=""
        valid=true
        added_packages=""

        for req in $changed_reqs; do
          clean_req=$(echo "$req" | sed 's/^[ \t]*//;s/[ \t]*$//')
          if [ -n "$clean_req" ]; then
            if ! pip install --dry-run "$clean_req" &>/dev/null; then
              echo "::error::Requirement not satisfiable: $clean_req"
              invalid_packages+=" $clean_req"
              valid=false
            else
              added_packages+="$clean_req,"
            fi
          fi
        done

        if [ "$valid" = false ]; then
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "added=" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "valid=true" >> $GITHUB_OUTPUT
          # Remove trailing comma and escape for output
          formatted_reqs=$(echo "$changed_reqs" | tr '\n' ',' | sed 's/,$//')
          echo "added=${formatted_reqs}" >> $GITHUB_OUTPUT
        fi

  alpha-beta-release:
    needs: [track-changes, verify-requirements]
    if: |
      (needs.track-changes.outputs.version-changed == 'true' || 
      needs.track-changes.outputs.requirements-changed == 'true') &&
      (
        needs.track-changes.outputs.requirements-changed != 'true' ||
        (needs.verify-requirements.result == 'success' && needs.verify-requirements.outputs.valid-requirements == 'true')
      )

    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.create-release.outputs.release_created }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=$(jq -r '.version' version.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Authenticate with Release API
      id: login
      run: |
        response=$(curl -s -X POST "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/auth/login/" \
          -H "Content-Type: application/json" \
          -d '{"username": "${{ secrets.RELEASE_API_USER }}", "password": "${{ secrets.RELEASE_API_PASS }}"}')

        token=$(echo "$response" | jq -r '.token')
        if [ "$token" == "null" ] || [ -z "$token" ]; then
          echo "::error::Failed to authenticate with Release API"
          exit 1
        fi
        echo "::add-mask::$token"
        echo "token=$token" >> $GITHUB_OUTPUT

    - name: Create release in external system
      id: create-release
      run: |
        echo "Creating release record in external system..."
        desc="Alpha release for version ${{ steps.version.outputs.version }}"
        
        # Get the dependencies and convert to proper JSON array
        deps="${{ needs.verify-requirements.outputs.added-packages }}"
        commit="${GITHUB_SHA}"
        
        # Create properly formatted dependencies array
        if [ -n "$deps" ]; then
          deps_json=$(echo "$deps" | jq -R 'split(",") | map(select(. != ""))')
          # If the resulting array is empty, treat it as null
          if [ "$(echo "$deps_json" | jq 'length')" -eq 0 ]; then
            deps_json="null"
          fi
        else
          deps_json="null"
        fi
        
        echo "Dependencies being sent:"
        echo "$deps_json"
        
        # Create the complete JSON payload
        json_body=$(jq -n \
          --arg ver "${{ steps.version.outputs.version }}" \
          --arg desc "$desc" \
          --arg commit "$commit" \
          --argjson deps "$deps_json" \
          '{
            version_number: $ver,
            description: $desc,
            dependencies: $deps,
            commit_hash: $commit
          }')
        
        echo "Full JSON payload:"
        echo "$json_body"
        
        # Send to external API
        response=$(curl -s -w "%{http_code}" -o tmp_response.json \
          -X POST "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/devices/releases/create/" \
          -H "Authorization: Bearer ${{ steps.login.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d "$json_body")

        status_code=$(tail -n1 <<< "$response")
        if [ "$status_code" != "200" ] && [ "$status_code" != "201" ]; then
          echo "::error::Failed to create release. Status: $status_code"
          cat tmp_response.json
          exit 1
        fi

        release_id=$(jq -r '.id' tmp_response.json)
        if [ "$release_id" == "null" ] || [ -z "$release_id" ]; then
          echo "::error::Release ID not returned"
          cat tmp_response.json
          exit 1
        fi

        echo "release_id=$release_id" >> $GITHUB_OUTPUT
        echo "release_created=true" >> $GITHUB_OUTPUT

    - name: Run all unit tests and set pass flag
      id: run-tests
      run: |
        echo "Running all tests in tests/..."
        if python -m unittest discover -s tests -p "*.py"; then
          echo "passed=true" >> $GITHUB_OUTPUT
          # continues to promotion if tests pass
        else
          echo "::error::Unit tests failed"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
          # exits if tests fail
        fi


    - name: Patch alpha test passed status
      run: |
        echo "Patching alpha test result..."
        response=$(curl -s -w "%{http_code}" -o patch_response.json -X PATCH "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/devices/releases/passed_alpha_test/${{ steps.create-release.outputs.release_id }}/" \
          -H "Authorization: Bearer ${{ steps.login.outputs.token }}" \
          -H "Content-Type: application/json" \
          -d '{"is_alpha_test_passed": true}')

        status_code=$(tail -n1 <<< "$response")
        if [ "$status_code" != "200" ]; then
          echo "::error::Failed to patch alpha status. Status: $status_code"
          cat patch_response.json
          exit 1
        fi

    - name: Promote to beta
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Promoting release to beta..."
        response=$(curl -s -w "%{http_code}" -o promote_response.json -X PATCH "${{ secrets.RELEASE_API_BASE_URL }}/core/api/v2/devices/releases/promote/${{ steps.create-release.outputs.release_id }}/" \
          -H "Authorization: Bearer ${{ steps.login.outputs.token }}")

        status_code=$(tail -n1 <<< "$response")
        if [ "$status_code" != "200" ]; then
          echo "::error::Failed to promote to beta. Status: $status_code"
          cat promote_response.json
          exit 1
        fi



  create-release:
    needs: [track-changes, verify-requirements, alpha-beta-release]
    if: |
      github.event.pull_request.merged == true &&
      needs.alpha-beta-release.outputs.release-created &&
      (needs.track-changes.outputs.version-changed == 'true' || 
       needs.track-changes.outputs.requirements-changed == 'true') &&
      (needs.track-changes.outputs.requirements-changed == 'false' || 
       needs.verify-requirements.outputs.valid-requirements == 'true')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ -f "version.json" ]; then
          VERSION=$(jq -r '.version' version.json)
        else
          VERSION="0.0.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ### Changes in this release
          ${{ needs.track-changes.outputs.version-changed == 'true' && '- Version updated' || '' }}
          ${{ needs.track-changes.outputs.requirements-changed == 'true' && '- Requirements updated' || '' }}
          
          Merged via PR #${{ github.event.pull_request.number }}:
          ${{ github.event.pull_request.html_url }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}